name: Native Executable Dynamic Resources (Database) Quarkus Event Loop vs Worker Pool
scripts:

  define-signals:
    - for-each: RUNTIME ${{RUNTIMES}}
      then:
        - set-signal: ${{RUNTIME.name}}-READY 1
        - set-signal: ${{RUNTIME.name}}-DONE 1
        - for-each: RUN_RATE ${{RUNTIME.runRates}}
          then:
            - set-signal: ${{RUNTIME.name}}-${{RUN_RATE}}-WARM-UP-START 1
            - set-signal: ${{RUNTIME.name}}-${{RUN_RATE}}-WARM-UP-END 1
            - set-signal: ${{RUNTIME.name}}-${{RUN_RATE}}-MEASURE-START 1
            - set-signal: ${{RUNTIME.name}}-${{RUN_RATE}}-MEASURE-END 1
 
  set-locale-numeric:
    - sh: export LC_NUMERIC="en_US.UTF-8"
    
  clear-server-dirs: # runs on server host
    - sh: if [ -d ${{SERVER_FILE_PATH}} ]; then rm -Rf ${{SERVER_FILE_PATH}}; fi
    - sh: mkdir -p ${{SERVER_FILE_PATH}}/output

  clear-client-dirs: # runs on client host
    - sh: if [ -d ${{CLIENT_FILE_PATH}} ]; then rm -Rf ${{CLIENT_FILE_PATH}}; fi
    - sh: mkdir -p ${{CLIENT_FILE_PATH}}/output
    
  build-applications: # runs on server host
    - sh: sdk use java ${{JAVA_VERSION}}
    - sh: java --version
    - sh: cd ${{SERVER_FILE_PATH}}
    - sh: git -c http.sslVerify=false clone ${{TEST_REPO_URL}}
    - sh: cd ${{SERVER_FILE_PATH}}/${{TEST_REPO_DIR}}
    - sh: git switch ${{TEST_REPO_BRANCH}}
    - sh: git rev-parse HEAD
    - sh: npm install request
    - sh: docker build -f ${{DATABASE.dockerfile}} -t ${{DATABASE.dockerImageName}} .
    - sh: docker stop ${{DATABASE.name}} # stop a potentially still running container (likely due to an error in the script)
    - sh: docker run --rm -d --network=host --cpus=${{DOCKER_DB_CPUS}} --memory=${{DOCKER_DB_MEM}} --name=${{DATABASE.name}} ${{DATABASE.dockerImageName}} -c max_connections=${{DATABASE.maxConnections}}
    - sh: sleep 5s
    - for-each: RUNTIME ${{RUNTIMES}}
      then:
        - sh: cd ${{SERVER_FILE_PATH}}/${{TEST_REPO_DIR}}/${{RUNTIME.name}}
        - sh: eval ${{RUNTIME.testCmd}} > /dev/null #First build *might* download all artifacts - discard
        - sh: echo "" > ${{SERVER_FILE_PATH}}/output/${{RUNTIME.name}}.test.out
        - sh: eval ${{RUNTIME.testCmd}} >> ${{SERVER_FILE_PATH}}/output/${{RUNTIME.name}}.test.out
        - sh: echo "" > ${{SERVER_FILE_PATH}}/output/${{RUNTIME.name}}.build.out
        - sh: eval ${{RUNTIME.buildCmd}} >> ${{SERVER_FILE_PATH}}/output/${{RUNTIME.name}}.build.out
        - sh: docker build -f ${{RUNTIME.dockerfile}} -t ${{RUNTIME.dockerImageName}} .
        - sh: cd ${{SERVER_FILE_PATH}}/${{TEST_REPO_DIR}}
        - sh: echo "" > ${{SERVER_FILE_PATH}}/output/${{RUNTIME.name}}.timeFirstRequest.out
        - sh: for i in  $(seq 1 ${{TEST_ITERATIONS}}); do eval node scripts/timing/time-native.js ${{RUNTIME.name}}/target/${{RUNTIME.targetFile}} >> ${{SERVER_FILE_PATH}}/output/${{RUNTIME.name}}.timeFirstRequest.out; done
        - queue-download: ${{SERVER_FILE_PATH}}/output/*
    
  start-applications: # runs on server host
    - sh: cd ${{SERVER_FILE_PATH}}/${{TEST_REPO_DIR}}
    - for-each: RUNTIME ${{RUNTIMES}}
      then:
        - sh: docker stop ${{RUNTIME.name}} #Force a stop, in case we have a container running with same name
        - sh: docker run --rm -d --network=host --cpus=${{DOCKER_APP_CPUS}} --memory=${{DOCKER_APP_MEM}} --name=${{RUNTIME.name}} ${{RUNTIME.dockerImageName}}:latest
        - sh: sleep 5s
        - sh: ps -AF | grep ${{RUNTIME.runName}} | grep -v grep | awk '{print $2}' # get process id of java process
          then:
            - set-state: RUN.JAVA_APP_PID
        - sh: curl  -s -w "%{http_code}\n"  -o ${{SERVER_FILE_PATH}}/output/${{RUNTIME.name}}.env.out ${{ENVIRONMENT_URL}}
        - signal: ${{RUNTIME.name}}-READY # signal client host that it generate-load script can continue (it waits on this signal)
        - wait-for: ${{RUNTIME.name}}-DONE
        - sh: docker logs ${{RUNTIME.name}} > ${{SERVER_FILE_PATH}}/output/${{RUNTIME.name}}.run.log
        - queue-download: ${{SERVER_FILE_PATH}}/output/${{RUNTIME.name}}.run.log
        - sh: docker stop ${{RUNTIME.name}}
        - sh: sleep 5s #wait for java process to exit
    - sh: docker stop ${{DATABASE.name}} # stop the database after all runtime tests are done    


  generate-load: # runs on client host
    - for-each: RUNTIME ${{RUNTIMES}}
      then:
        - wait-for: ${{RUNTIME.name}}-READY
        - for-each: RUN_RATE ${{RUNTIME.runRates}}
          then:
            - signal: ${{RUNTIME.name}}-${{RUN_RATE}}-WARM-UP-START
            - sh: wrk -t 4 -c 100 -d60s -R ${{RUN_RATE}} ${{TEST_DYNAMIC_ENDPOINT}} > ${{CLIENT_FILE_PATH}}/output/${{RUNTIME.name}}-${{RUN_RATE}}-WARM-UP.wrk2.out
            - signal: ${{RUNTIME.name}}-${{RUN_RATE}}-WARM-UP-END
            - sh: sleep 5s
            - signal: ${{RUNTIME.name}}-${{RUN_RATE}}-MEASURE-START
            - sh: wrk -t 4 -c 100 -d60s -R ${{RUN_RATE}} --latency ${{TEST_DYNAMIC_ENDPOINT}} > ${{CLIENT_FILE_PATH}}/output/${{RUNTIME.name}}-${{RUN_RATE}}-MEASURE.wrk2.out
            - signal: ${{RUNTIME.name}}-${{RUN_RATE}}-MEASURE-END
            - sh: sleep 5s # make sure the top-process is killed before the next iteration
        - signal: ${{RUNTIME.name}}-DONE
    - queue-download: ${{CLIENT_FILE_PATH}}/output/*

  capture-platform-stats: # runs on server host
    - for-each: RUNTIME ${{RUNTIMES}}
      then:
        - for-each: RUN_RATE ${{RUNTIME.runRates}}
          then:
            - wait-for: ${{RUNTIME.name}}-${{RUN_RATE}}-WARM-UP-START
            - sh: top -b  -d 1 -p ${{RUN.JAVA_APP_PID}} | grep application > ${{SERVER_FILE_PATH}}/output/${{RUNTIME.name}}-${{RUN_RATE}}-WARM-UP-top.out &
            - sh: export TOP_PID=$!
            - wait-for: ${{RUNTIME.name}}-${{RUN_RATE}}-WARM-UP-END
            - sh: kill -9 $TOP_PID
            - wait-for: ${{RUNTIME.name}}-${{RUN_RATE}}-MEASURE-START
            - sh: top -b  -d 1 -p ${{RUN.JAVA_APP_PID}} | grep application > ${{SERVER_FILE_PATH}}/output/${{RUNTIME.name}}-${{RUN_RATE}}-MEASURE-top.out &
            - sh: export TOP_PID=$!
            - wait-for: ${{RUNTIME.name}}-${{RUN_RATE}}-MEASURE-END
            - sh: kill -9 $TOP_PID

hosts:
  client: erik@erik-laptop:22
  server: erik@erik-pc:22

roles:

  client:
    hosts: [client]
    setup-scripts:
      - set-locale-numeric
      - clear-client-dirs
    run-scripts:
      - generate-load
  server:
    hosts: [server]
    setup-scripts:
      - set-locale-numeric
      - define-signals
      - clear-server-dirs
      - build-applications
    run-scripts:
      - start-applications
      - capture-platform-stats
states:

  TEST_REPO_URL: https://github.com/ErikSimonsen/quarkus-iothread-workerpool
  TEST_REPO_DIR: quarkus-iothread-workerpool
  TEST_REPO_BRANCH: master
  SERVER_FILE_PATH: /tmp/quarkus-test/server
  CLIENT_FILE_PATH: /tmp/quarkus-test/client

  TEST_ITERATIONS: 5

  DOCKER_APP_CPUS: 4
  DOCKER_APP_MEM: 1024m
  DOCKER_DB_CPUS: 4
  DOCKER_DB_MEM: 2048m
  RUNTIMES: [
    {
          name: 'quarkus-io-thread'
      ,   buildCmd: './mvnw clean package -DskipTests -Pnative -Dquarkus.native.container-build=true'
      ,   dockerfile: src/main/docker/Dockerfile.native
      ,   dockerImageName: framework/quarkus-io-thread
      ,   testCmd: './mvnw clean test'
      ,   targetFile: 'quarkus-io-thread-runner' # native application, not a .jar file anymore
      ,   runName: './application' # the application runs under the name 'application' inside the Dockercontainer (Dockerfile.native - default generated Dockerfile), instead of the app name, use './application' instead of 'application' because otherwise there would be multiple processes be found via grep
      ,   runRates: [5000, 10000, 15000, 16000, 17000, 18000]
    }, {
        name: 'quarkus-worker-pool'
      , buildCmd: './mvnw clean package -DskipTests -Pnative -Dquarkus.native.container-build=true'
      , dockerfile: src/main/docker/Dockerfile.native
      , dockerImageName: framework/quarkus-worker-pool
      , testCmd: './mvnw clean test'
      , targetFile: 'quarkus-worker-pool-runner' # native application, not a .jar file anymore
      , runName: './application' # the application runs under the name 'application' inside the Dockercontainer (Dockerfile.native - default generated Dockerfile), instead of the app name, use './application' instead of 'application' because otherwise there would be multiple processes be found via grep
      , runRates: [5000, 10000, 15000, 16000]
    }
  ]
  DATABASE: {
        name: 'quarkus-db',
        maxConnections: 100,
        dockerfile: Dockerfile.db,
        dockerImageName: postgres-db
  }
  TEST_DYNAMIC_ENDPOINT: http://erik-pc.local:8080/fruits
  ENVIRONMENT_URL: http://erik-pc.local:8080/environment

  JAVA_VERSION: '11.0.11-open'
